<?php
namespace zetsoft\service\calls;


use zetsoft\system\kernels\ZFrame;
use Clue\React\Ami\Factory;
use Clue\React\Ami\Client;
use Clue\React\Ami\ActionSender;
use Clue\React\Ami\Protocol\Response;

class ReactAmiS extends ZFrame
{
    #region Vars

    public const ip = [
        '41' => '10.10.3.41',
        '30' => '10.10.3.30'
    ];

    public $ip = Self::ip['41'];

    public $user = [
        'user' => 'amiuser',
        'pass' => 'amiuser'
    ];

    public $callerId = '1111';

    public $ext = '204';

    public $port = '5038';

    public $exts = ['202', '203', '204'];

    public $context = 'from-internal';

    public $priority = '1';

    public $async = true;


    public $client;

    public $agent = '202';

    public $soft = true;

    public $command;

    public $eventName;
    private $sender;
    private $action;
    private $factoryCre;
    private $loop;
    private $factory;
    private $promise;
    private $authtype;
    private $operation;
    private $filter;
    private $filename;
    private $category;
    private $queue = '1111';
    private $interface;
    private $penalty = 'name';
    private $paused = false;
    private $membername;
    private $stateinterface;
    private $ringinuse;
    private $allvariables = true;
    private $variables = [];
    private $extension;
    #endregion

    #region Cores

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->loop = \React\EventLoop\Factory::create();
        $this->factory = new Factory($this->loop);
        $this->factoryCre = $this->factory->createClient($this->user['user'] . ':' . $this->user['pass'] . '@' . $this->ip . ':' . $this->port);

    }

    #endregion

    #region Action

    public function originate()
    {
        $this->factoryCre->then(function (Client $client) {
            echo 'Client connected...' . PHP_EOL;

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('Originate', array(
                'Channel' => 'SIP/' . $this->ext,
                'Callerid' => $this->callerId,
                'Context' => $this->context,
                'Exten' => $this->callerId,
                'Priority' => $this->prioritys));
            $this->promise = $client->request($this->action);
        });
    }

    public function originateMultiple()
    {
        $this->factoryCre->then(function (Client $client) {
            echo 'Client connected...' . PHP_EOL;
            foreach ($this->exts as $num) {
                $this->sender = new ActionSender($client);
                $this->action = $client->createAction('Originate', array(
                    'Channel' => 'SIP/' . $num,
                    'Callerid' => $this->callerId,
                    'Context' => $this->context,
                    'Exten' => $this->callerId,
                    'Priority' => $this->priority,
                    'MyTask' => $this->async
                ));
                $this->promise = $client->request($this->action);
                echo $num.'called';
            }
        });
    }

    public function showCommands()
    {
        $this->factoryCre->then(function (Client $client) {
            $this->sender = new \Clue\React\Ami\ActionSender($client);
            $this->sender->listCommands()->then(function (\Clue\React\Ami\Protocol\Response $response) {
                echo 'Available commands:' . PHP_EOL;
                var_dump($response);
            });
        });

    }

    public function executeCommands()
    {
        $this->factoryCre->then(function (Client $client) {
            $this->sender = new \Clue\React\Ami\ActionSender($client);
//            $this->sender->command($this->command);
            $this->sender->command('Monitor')->then(function (\Clue\React\Ami\Protocol\Response $response) {
                echo $response->getCommandOutput();
            });
        });
        echo 'Finish' . PHP_EOL;

    }


    public function status()
    {
        $this->factoryCre->then(function (Client $client) {
            //echo 'Client connected...' . PHP_EOL;
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('Status', array(
                'ActionID' => uniqid('', true),
                '[Channel]' => 'SIP/202',
                'Variables' => $this->variables,
                'AllVariables' => $this->allvariables,
            ));
            $this->promise = $client->request($this->action);

        });
    }

    public function showDialPlan()
    {
        $this->factoryCre->then(function (Client $client) {
            //echo 'Client connected...' . PHP_EOL;
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('showDialPlan', array(
                'ActionID' => uniqid('', true),
                '[Channel]' => 'SIP/202',
                'Extension' => $this->extension,
                'Context' => $this->context,
            ));
            $this->promise = $client->request($this->action);

        });
    }

    public function loopRun()
    {
        $this->loop->run();
    }

    #endregion

    #region Events
    public function eventEvent()
    {
        $this->factoryCre->then(function (Client $client) {
            $client->on('event', function (\Clue\React\Ami\Protocol\Event $event) {
                echo $event->getName() . ' event fired!' . PHP_EOL;
            });
        });
    }

    public function eventReact()
    {
        $this->factoryCre->then(function (Client $client) {
            $client->on('event', function (\Clue\React\Ami\Protocol\Event $event) {
                if ($event->getName() === $this->eventName) {
                    echo $event->getName() . ' event fired!' . PHP_EOL;
                }
            });
        });
    }

    public function errorEvent()
    {
        $this->factoryCre->then(function (Client $client) {
            $client->on('error', function (Exception $e) {
                echo 'Error: ' . $e->getMessage() . PHP_EOL;
            });
        });
    }

    public function closeEvent()
    {
        $this->factoryCre->then(function (Client $client) {
            $client->on('close', function () {
                echo 'Connection closed' . PHP_EOL;
            });
        });
    }

    public function test(){

        $loop = \React\EventLoop\Factory::create();
        $factory = new \Clue\React\Ami\Factory($loop);

        $factory->createClient('amiuser:amiuser@10.10.3.41:5038')->then(function (\Clue\React\Ami\Client $client) {
            echo 'Client connected' . PHP_EOL;

            $sender = new \Clue\React\Ami\ActionSender($client);
            $sender->coreShowChannels()->then(function (\Clue\React\Ami\Protocol\Response $response) {
                echo 'Available commands:' . PHP_EOL;
                   var_dump($response);
            });
        });

        $loop->run();

    }

#endregion


}
