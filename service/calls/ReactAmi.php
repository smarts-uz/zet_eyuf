<?php
/**
 * Author:  Xolmat Ravshanov & Bobur Komiljonov
 *
 *
 */

namespace zetsoft\service\calls;



require Root . '/vendors/phone/vendor/autoload.php';

use zetsoft\dbitem\App\eyuf\AutoDialItem;
use zetsoft\models\shop\ShopOrder;
use zetsoft\models\user\User;
use zetsoft\system\Az;
use zetsoft\system\kernels\ZFrame;
use Clue\React\Ami\Factory;
use Clue\React\Ami\Client;
use Clue\React\Ami\ActionSender;
use function Clue\StreamFilter\fun;

class ReactAmi extends ZFrame
{
    #region Vars

    public const ip = [
        '41' => '10.10.3.41',
        '30' => '10.10.3.30',
        '31' => '10.10.3.31'
    ];

    public $ip = Self::ip['31'];

    private $user = [
        'user' => 'amiuser',
        'pass' => 'amiuser'
    ];
    public $callerId = '203';
    public $ext = '204';
    public $port = '5038';
    public $exts = ['202', '204', '203'];
    public $context = 'from-internal';
    public $channel = 'Channel: SIP/204';
    public $username;
    public $secret;
    public $variable;
    public $value;
    public $file = 'C:/monitor/';
    public $format = 'wav';
    public $mix = true;
    public $peer = '204';
    public $mixMonitorId;
    public $priority = '1';
    public $caller;
    public $async = true;
    public $client;
    public $agent = '202';
    public $soft = true;
    public $command;
    public $conf = [];
    public $eventName;
    public $actionG;
    public $memberName;
    public $action;
    public $sender;
    public $factoryCre;
    public $loop;
    public $factory;
    public $promise;
    public $authtype;
    public $operation;
    public $filter;
    public $filename;
    public $category;
    public $queue = '1111';
    public $members;
    public $member;
    public $rules;
    public $parametres;
    public $interface;
    public $rule;
    public $reason;
    public $event;
    public $deferred;
    public $message;
    public $penalty;
    public $paused;
    public $membername;
    public $stateInterface;
    public $ringinuse;
    public $allvariables = true;
    public $variables = [];
    #endregion


    #region Cores
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->loop = \React\EventLoop\Factory::create();
        $this->deferred = new \React\Promise\Deferred();
        $this->factory = new Factory($this->loop);
        $this->factoryCre = $this->factory->createClient($this->user['user'] . ':' . $this->user['pass'] . '@' . $this->ip . ':' . $this->port);

    }

    #endregion
    public function test()
    {
        //$this->originate();
        $calls = Az::$app->calls->autoDial->callAgent1();

        // $this->originate11($calls);
        //$this->originate11($calls);

        $res =  $this->getStatus('204', $calls);
        vdd($res);
        //    $this->getStatus();
        // $this->monitor();
        //$this->originateWithStatus('204');
        //  $this-> getStatus('204');
    }


    #region Action

    /**
     * Function  originate
     */
    public function originate()
    {
        $this->factoryCre->then(function (Client $client) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('Originate', [
                'Channel' => 'SIP/' . $this->ext,
                'Callerid' => $this->callerId,
                'Context' => $this->context,
                'Exten' => $this->callerId,
                'Priority' => $this->priority,
                'Async' => $this->async]);
            $this->promise = $client->request($this->action);
        });
        $this->loop->run();
    }

    #Orignate Multiply
    public function originate11($calls)
    {
        $this->factoryCre->then(function (Client $client) use ($calls) {
               foreach ($calls as $key => $call) {
                   $status = Az::$app->calls->marceAMI->extStatus($call->operator, 'from-internal');
                   if ($status == '0') {
                       $this->sender = new ActionSender($client);
                       $this->action = $client->createAction('Originate', [
                           'Channel' => 'SIP/' . $call->client,
                           'Callerid' => $call->order_id,
                           'Context' => $this->context,
                           'Exten' => $call->operator,
                           'Priority' => $this->priority,
                           'Async' => $this->async]);
                       $this->promise = $client->request($this->action);
                       unset($calls[$key]);
                       vd($call->client);
               }
           }
        });
        $this->loop->run();

    }


    public function originatePro($calls)
    {
        $this->factoryCre->then(function (Client $client) use ($calls) {
            $numbers = $calls;
            if (empty($numbers))
                die();


            foreach ($numbers as $key => $number) {
                $status = Az::$app->calls->marceAMI->extStatus($number->operator, 'from-internal');

                if ($status == '0') {
                    $this->sender = new ActionSender($client);
                    $this->action = $client->createAction('Originate', [
                        'Channel' => 'SIP/' . $number->client,
                        'Callerid' => $number->order_id,
                        'Context' => $this->context,
                        'Exten' => $number->operator,
                        'Priority' => $this->priority,
                        'Async' => $this->async]);
                    $this->promise = $client->request($this->action);
                    unset($numbers[$key]);
                    vd($number->client);
                }
            }
        });

        $this->loop->run();
    }


    public function call()
    {
        $calls = Az::$app->calls->autoDial->callAgent1();
        while (true) {
            $numbers = $calls;
            vd($numbers);
            if (empty($numbers))
                die();

            foreach ($numbers as $key => $number) {
                $status = Az::$app->calls->marceAMI->extStatus($number->operator, 'from-internal');
                if ($status === '0') {
                    $this->originatePro($number);
                    unset($numbers[$key]);
                    vd($number->client);
                }
            }
        }
    }


    public function originateWithStatus($ext, $number)
    {
        $this->factoryCre->then(function (Client $client) use ($ext, $number) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('ExtensionState', [
                'Context' => 'from-internal',
                'Exten' => $ext,
                'ActionID' => uniqid(),
            ]);
            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) use ($client, $number) {
                if ($response->getFields()['Status'] == '0') {


                    $this->action = $client->createAction('Originate', [
                        'Channel' => 'SIP/' . $number->client,
                        'Callerid' => $number->order_id,
                        'Context' => $this->context,
                        'Exten' => $number->client,
                        'Priority' => $this->priority,
                        'Async' => $this->async]);
                    $this->promise = $client->request($this->action);
                }
            });
        });
        $this->loop->run();
    }


    public function getStatus($ext, $calls)
    {

        $this->factoryCre->then(function (Client $client) use ($ext, $calls) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('ExtensionState', [
                'Context' => 'from-internal',
                'Exten' => $ext,
                'ActionID' => uniqid(),
            ]);
            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) use ($calls, $client) {
              $status = $response->getFields()['Status'];
                   foreach ($calls as $key => $call) {
                       if($status == '0'){
                       vd($status. ' status');
                           $this->sender = new ActionSender($client);
                           $this->action = $client->createAction('Originate', [
                               'Channel' => 'SIP/' . $call->client,
                               'Callerid' => $call->order_id,
                               'Context' => $this->context,
                               'Exten' => $call->operator,
                               'Priority' => $this->priority,
                               'Async' => $this->async]);
                           $this->promise = $client->request($this->action);
                           unset($calls[$key]);
                           vd($call->client);
                   }

               }
            });
        });

        $this->loop->run();
    }


    public function getStatus11($ext)
    {

        $this->factoryCre->then(function (Client $client) use ($ext) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('ExtensionState', [
                'Context' => 'from-internal',
                'Exten' => $ext,
                'ActionID' => uniqid(),
            ]);
            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response->getFields()['Status'];
            });


        });

        $this->loop->run();
    }


    public function reactCall($ext, $number)
    {
        $this->factoryCre->then(function (Client $client) use ($number, $ext) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('ExtensionState', [
                'Context' => 'from-internal',
                'Exten' => $ext,
                'ActionID' => uniqid(),
            ]);
            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) use ($client, $ext, $number) {
                if ($response->getFields()['Status'] == '0') {
                    $this->action = $client->createAction('Originate', [
                        'Channel' => 'SIP/' . $number->client,
                        'Callerid' => $number->order_id,
                        'Context' => $this->context,
                        'Exten' => $number->operator,
                        'Priority' => $this->priority,
                        'Async' => $this->async]);
                    $this->promise = $client->request($this->action);

                }
            });
            return null;
        });
        $this->loop->run();
    }


    public function originate1($callerId, $ext, $id)
    {
        $this->factoryCre->then(function (Client $client) use ($callerId, $ext, $id) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('Originate', [
                'Channel' => 'SIP/' . $ext,
                'Callerid' => $id,
                'Context' => $this->context,
                'Exten' => $callerId,
                'Priority' => $this->priority,
                'Async' => $this->async]);
            $this->promise = $client->request($this->action);
        });
        $this->loop->run();
    }


    public function showCommands()
    {

        $this->factoryCre->then(function (Client $client) {
            $this->sender = new \Clue\React\Ami\ActionSender($client);
            $this->sender->listCommands()->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    /**
     * Function  getStatus
     * @param extention
     * @param context
     *
     */
    public function getStatus2($ext)
    {

        $this->factoryCre->then(function (Client $client) use ($ext) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('ExtensionState', [
                'Context' => 'from-internal',
                'Exten' => $ext,
                'ActionID' => uniqid(),
            ]);
            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response->getFields()['Status'];
            });
        });

        $this->loop->run();
    }

    public function getStatus1()
    {
        $this->factoryCre->then(function (Client $client) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('ExtensionState', array(
                'ActionId' => uniqid(),
                'Exten' => $this->ext,
                'Context' => $this->context
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }


    public function queueAdd()
    {
        $this->factoryCre->then(function (Client $client) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueAdd', [
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'Interface' => $this->interface,
                'MemberName' => $this->memberName,
                'Penalty' => $this->penalty,
                'Paused' => $this->paused,
                'StateInterface' => $this->stateInterface
            ]);

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queueChangePriorityCaller()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueChangePriorityCaller', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'Caller' => $this->caller,
                'Priority' => $this->priority
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queueLog()
    {
        $this->factoryCre->then(function (Client $client) {
            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueLog', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'Event' => $this->event,
                'Uniqueid' => uniqid(),
                'Interface' => $this->interface,
                'Message' => $this->message
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queueMemberRingInUse()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueMemberRingInUse', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'RingInUse' => $this->ringinuse,
                'Interface' => $this->interface
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queuePause()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueuePause', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'Reason' => $this->reason,
                'Interface' => $this->interface,
                'Paused' => $this->paused
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queuePenalty()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueuePenalty', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'Interface' => $this->interface,
                'Penalty' => $this->penalty
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queueReload()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueReload', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'Members' => $this->members,
                'Rules' => $this->rules,
                'Parametres' => $this->parametres
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queueRemove()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueRemove', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'Interface' => $this->interface
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queueReset()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueReset', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queueRule()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueRule', [
                'ActionID' => uniqid(),
                'Rule' => $this->rule
            ]);

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });

        $this->loop->run();
    }

    public function queueStatus()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueStatus', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue,
                'Member' => $this->member
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function queueSummary()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('QueueSummary', array(
                'ActionID' => uniqid(),
                'Queue' => $this->queue
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function showDialPlan()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('ShowDialPlan', array(
                'ActionID' => uniqid(),
                'Extension' => $this->ext,
                'Context' => $this->context
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function StopMixMonitor()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('StopMixMonitor', array(
                'ActionID' => uniqid(),
                'Channel' => $this->channel,
                '[MixMonitorID]' => $this->mixMonitorId
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function sipshowpeer()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('SIPshowpeer', array(
                'ActionID' => uniqid(),
                'Peer' => $this->peer
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function sipshowregistry()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('SIPshowregistry', array(
                'ActionID' => uniqid()
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function monitor()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('Monitor', array(
                'ActionID' => uniqid(),
                'Channel' => $this->channel,
                'File' => $this->file,
                'Format' => $this->format,
                'Mix' => $this->mix
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();
    }

    public function setvar()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('Setvar', array(
                'ActionID' => uniqid(),
                'Channel' => $this->channel,
                'Variable' => $this->variable,
                'Value' => $this->value
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();

    }

    public function login()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('Login', array(
                'ActionID' => uniqid(),
                'Username' => $this->username,
                'Secret' => $this->secret
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();

    }

    public function logoff()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('Logoff', array(
                'ActionID' => uniqid()
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();

    }

    public function createConfig()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction('CreateConfig', array(
                'ActionID' => uniqid(),
                'Filename' => $this->filename
            ));

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();

    }


    public function executeCommands()
    {
        $this->factoryCre->then(function (Client $client) {

            $this->sender = new ActionSender($client);
            $this->action = $client->createAction($this->actionG, $this->conf);

            $this->promise = $client->request($this->action);
            $this->promise->then(function (\Clue\React\Ami\Protocol\Response $response) {
                return $response;
            });
        });
        $this->loop->run();

    }

    #endregion

    #region Events
    public function eventEvent()
    {
        $this->factoryCre->then(function (Client $client) {
            $client->on('event', function (\Clue\React\Ami\Protocol\Event $event) {
                echo $event->getName() . ' event fired!' . PHP_EOL;
            });
        });
        $this->loop->run();

    }

    public function eventReact()
    {
        $this->factoryCre->then(function (Client $client) {
            $client->on('event', function (\Clue\React\Ami\Protocol\Event $event) {
                if ($event->getName() === $this->eventName) {
                    return $event->getName();
                }
            });
        });
        $this->loop->run();

    }

    public function eventError()
    {
        $this->factoryCre->then(function (Client $client) {
            $client->on('error', function (Exception $e) {
                echo 'Error: ' . $e->getMessage() . PHP_EOL;
            });
        });
        $this->loop->run();
    }

    public function eventClose()
    {
        $this->factoryCre->then(function (Client $client) {
            $client->on('close', function () {
                echo 'Connection closed' . PHP_EOL;
            });
        });
        $this->loop->run();

    }

#endregion


}
